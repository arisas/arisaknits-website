<template>
  <div>
    <button
      type="button"
      class="text-l h-10 w-44 touch-manipulation rounded-lg bg-indigo-600 p-1 font-medium text-white hover:bg-indigo-700 disabled:cursor-not-allowed disabled:bg-slate-50 disabled:text-slate-500"

      @click="createCounter"
    >
      + New Counter
    </button>
    <!-- 
    for loop value for each item is index -->

<option v-for="(counterItem, index) in counterList" :value="index">
      {{ counterItem.counterName }} - Row: {{ counterItem.counterData
      }}{{
        counterItem.linkedCounterData === null ?
          ''
        : ` (x${counterItem.linkedCounterData})`
      }}
    </option>
  </div>
</template>

<script>
export default {
  props: {
    counterList: {
      type: Array,
    },
  },
  computed: {
      disableButton() {
      return this.counter == COUNTER_VALUE_MIN;
    }, 
    // a computed getter
counterList() {
      // `this` points to the component instance
      return this.counterList.map((record) => {
        const timeString = new Date(record.timestamp).toLocaleString(
          'en-US',
          options,
        );
        return {
          // spread syntax https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
          // easier way to do
          // key record.timestamp: timestamp and record.counterData: counterData
          // "timeString" is actually timeString: timeString but you don't need to write that all out if it's the same name
          ...record,
          timeString,
        };
      });
    },
  },

  // methods: {
  //   onChange(event) {
  //     // selection confirmation
  //     if (confirm('Are you sure you want to go back to a previous save?'))
  //       this.$emit('historySelected', event.target.value);
  //     event.target.value = '';
  //   },
  // },
};
</script>
